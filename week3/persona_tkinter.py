from tkinter import *
from tkinter import messagebox
import pandas as pd


def customer_level_based():
    df = pd.read_csv("persona.csv")
    df.columns = [col.lower() for col in df.columns]
    agg_df = df.groupby(["country", "source", "sex", "age"]).agg({"price": "mean"}).sort_values("price",
                                                                                                ascending=False).reset_index()
    agg_df["new_age_cat"] = pd.cut(agg_df["age"], bins=[0, 18, 23, 30, 40, 70],
                                   labels=["0_18", "19_23", "24_30", "31_40", "41_70"])
    agg_df["customer_level_based"] = [
        row[0].upper() + "_" + row[1].upper() + "_" + row[2].upper() + "_" + row[5].upper()
        for row in agg_df.values]
    agg_df_segment = agg_df.groupby("customer_level_based").agg({"price": "mean"}).reset_index()
    agg_df_segment["segment"] = pd.qcut(agg_df_segment["price"], 4, labels=["D", "C", "B", "A"])
    return agg_df_segment


def reset_entry():
    age_tf.delete(0, 'end')
    gen_tf.delete(0, 'end')
    sou_tf.delete(0, 'end')
    cou_tf.delete(0, 'end')


def generate_new_user(gen, source, country, age):
    if (age <= 70) and (age >= 0):
        age_range = ""
        if 0 <= age <= 18:
            age_range += "0_18"
        elif 19 <= age <= 23:
            age_range += "19_23"
        elif 24 <= age <= 30:
            age_range += "24_30"
        elif 31 <= age <= 40:
            age_range += "31_40"
        elif 41 <= age <= 70:
            age_range += "41_70"
    new_user = "{0}_{1}_{2}_{3}".format(country.upper(), source.upper(), gen.upper(), str(age_range))
    show_result(new_user)

def get_values():
    age = int(age_tf.get())
    gen = str(gen_tf.get())
    source = str(sou_tf.get())
    country = str(cou_tf.get())
    generate_new_user(gen, source, country, age)

def show_result(new_user):
    df = customer_level_based()
    print(new_user)
    price = df.loc[df["customer_level_based"] == new_user, "price"].values[0]
    segment = df.loc[df["customer_level_based"] == new_user, "segment"].values
    messagebox.showinfo('customer level based', f'Average revenue generated by the new customer = {price:.2f}$')
    messagebox.showinfo('customer level based', f'New customer segment = {segment}')


ws = Tk()
ws.title('Customer Level Based')
ws.geometry('400x300')
ws.config(bg='#686e70')

var = IntVar()

frame = Frame(
    ws,
    padx=10,
    pady=10
)
frame.pack(expand=True)

age_lb = Label(
    frame,
    text="Enter Age (0 - 70)"
)
age_lb.grid(row=1, column=1)

age_tf = Entry(
    frame,
)
age_tf.grid(row=1, column=2, pady=5)

gen_lb = Label(
    frame,
    text='Enter Gender(male, female)'
)
gen_lb.grid(row=2, column=1)

gen_tf = Entry(
    frame,
)
gen_tf.grid(row=2, column=2, pady=5)

sou_lb = Label(
    frame,
    text='Enter Source(Ios, Android)'
)
sou_lb.grid(row=3, column=1)

sou_tf = Entry(
    frame,
)
sou_tf.grid(row=3, column=2, pady=5)

cou_lb = Label(
    frame,
    text="Enter Country (tur, usa, bra, can, deu, fra)  ",

)
cou_lb.grid(row=4, column=1)

cou_tf = Entry(
    frame,
)
cou_tf.grid(row=4, column=2, pady=5)

frame3 = Frame(
    frame
)
frame3.grid(row=5, columnspan=3, pady=10)

cal_btn = Button(
    frame3,
    text='Calculate',
    command=get_values
)
cal_btn.pack(side=LEFT)

reset_btn = Button(
    frame3,
    text='Reset',
    command=reset_entry
)
reset_btn.pack(side=LEFT)

exit_btn = Button(
    frame3,
    text='Exit',
    command=lambda: ws.destroy()
)
exit_btn.pack(side=RIGHT)

ws.mainloop()
